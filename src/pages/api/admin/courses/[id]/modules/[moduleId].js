import { moduleQueries } from '../../../../../../lib/database.js';

export async function GET({ request, params, cookies }) {
    try {
        // Verificar autenticaci√≥n de admin
        const adminSession = cookies.get('admin_session')?.value;
        if (!adminSession) {
            return new Response(JSON.stringify({ error: 'No autorizado' }), {
                status: 401,
                headers: { 'Content-Type': 'application/json' }
            });
        }

        const moduleId = params.moduleId;
        
        // Obtener m√≥dulo por ID
        const module = moduleQueries.findById(moduleId);

        if (!module) {
            return new Response(JSON.stringify({ error: 'M√≥dulo no encontrado' }), {
                status: 404,
                headers: { 'Content-Type': 'application/json' }
            });
        }

        return new Response(JSON.stringify(module), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
        });
    } catch (error) {
        console.error('Error al obtener m√≥dulo:', error);
        return new Response(JSON.stringify({ error: 'Error interno del servidor' }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}

export async function PUT({ request, params, cookies }) {
    try {
        console.log('üîÑ Iniciando actualizaci√≥n de m√≥dulo...');
        console.log('üìù Par√°metros recibidos:', params);
        console.log('üç™ Cookies recibidas:', cookies.getAll());
        
        // Verificar autenticaci√≥n de admin
        const adminSession = cookies.get('admin_session')?.value;
        console.log('üîê Sesi√≥n de admin:', adminSession ? 'Presente' : 'Ausente');
        if (!adminSession) {
            console.log('‚ùå No hay sesi√≥n de admin');
            return new Response(JSON.stringify({ error: 'No autorizado' }), {
                status: 401,
                headers: { 'Content-Type': 'application/json' }
            });
        }

        const moduleId = params.moduleId;
        console.log('üìù ID del m√≥dulo:', moduleId);
        console.log('üìù Tipo de moduleId:', typeof moduleId);
        
        console.log('üì• Intentando parsear JSON del request...');
        const moduleData = await request.json();
        console.log('üìä Datos del m√≥dulo recibidos:', moduleData);
        console.log('üìä Tipo de datos:', typeof moduleData);
        
        // Validar datos requeridos
        const requiredFields = ['title', 'description', 'duration'];
        for (const field of requiredFields) {
            if (!moduleData[field]) {
                console.log(`‚ùå Campo requerido faltante: ${field}`);
                return new Response(JSON.stringify({ error: `Campo requerido: ${field}` }), {
                    status: 400,
                    headers: { 'Content-Type': 'application/json' }
                });
            }
        }

        // Si no hay videoUrl, usar placeholder
        if (!moduleData.videoUrl) {
            moduleData.videoUrl = 'sin_video';
        }

        // Preparar datos para actualizaci√≥n
        const updateData = {
            title: moduleData.title,
            description: moduleData.description,
            videoUrl: moduleData.videoUrl,
            duration: moduleData.duration,
            orderIndex: moduleData.orderIndex || 0,
            isFree: moduleData.isFree
        };

        console.log('üìä Datos preparados para actualizaci√≥n:', updateData);
        console.log('üìä Tipo de updateData:', typeof updateData);
        console.log('üìä Keys de updateData:', Object.keys(updateData));

        // Actualizar m√≥dulo
        console.log('üîÑ Llamando a moduleQueries.update...');
        console.log('üîÑ moduleId:', moduleId, 'tipo:', typeof moduleId);
        console.log('üîÑ updateData:', updateData);
        
        const result = moduleQueries.update(moduleId, updateData);
        console.log('üìù Resultado de actualizaci√≥n:', result);
        console.log('üìù Tipo de resultado:', typeof result);

        if (result.changes === 0) {
            console.log('‚ùå M√≥dulo no encontrado');
            return new Response(JSON.stringify({ error: 'M√≥dulo no encontrado' }), {
                status: 404,
                headers: { 'Content-Type': 'application/json' }
            });
        }

        console.log('‚úÖ M√≥dulo actualizado exitosamente');
        return new Response(JSON.stringify({ 
            message: 'M√≥dulo actualizado correctamente' 
        }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
        });
    } catch (error) {
        console.error('‚ùå Error al actualizar m√≥dulo:', error);
        return new Response(JSON.stringify({ error: 'Error interno del servidor' }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}

export async function DELETE({ request, params, cookies }) {
    try {
        // Verificar autenticaci√≥n de admin
        const adminSession = cookies.get('admin_session')?.value;
        if (!adminSession) {
            return new Response(JSON.stringify({ error: 'No autorizado' }), {
                status: 401,
                headers: { 'Content-Type': 'application/json' }
            });
        }

        const moduleId = params.moduleId;

        // Eliminar m√≥dulo (soft delete)
        const result = moduleQueries.delete(moduleId);

        if (result.changes === 0) {
            return new Response(JSON.stringify({ error: 'M√≥dulo no encontrado' }), {
                status: 404,
                headers: { 'Content-Type': 'application/json' }
            });
        }

        return new Response(JSON.stringify({ 
            message: 'M√≥dulo eliminado correctamente' 
        }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
        });
    } catch (error) {
        console.error('Error al eliminar m√≥dulo:', error);
        return new Response(JSON.stringify({ error: 'Error interno del servidor' }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}

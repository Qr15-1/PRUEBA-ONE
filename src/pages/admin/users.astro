---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { userQueries } from '../../lib/database.js';

// Obtener todos los usuarios
const users = await userQueries.getAll() as Array<{
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  phone: string | null;
  newsletter: number;
  is_active: number;
  created_at: string;
  updated_at: string;
}>;
const totalUsers = users.length;
const activeUsers = users.filter(user => user.is_active === 1).length;
const newUsersThisMonth = users.filter(user => {
  const userDate = new Date(user.created_at);
  const now = new Date();
  return userDate.getMonth() === now.getMonth() && userDate.getFullYear() === now.getFullYear();
}).length;

// Estadísticas adicionales
const usersWithNewsletter = users.filter(user => user.newsletter === 1).length;
const usersWithPhone = users.filter(user => user.phone && user.phone.trim() !== '').length;
---

<AdminLayout title="Gestión de Usuarios - RojasFitt">
  <div class="admin-page">
    <main class="admin-main">
      <!-- Header -->
      <div class="page-header">
        <h1 class="page-title">👥 Gestión de Usuarios</h1>
        <p class="page-subtitle">Administra los usuarios registrados en la plataforma</p>
      </div>

      <!-- Estadísticas -->
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon">👥</div>
          <div class="stat-content">
            <h3>Total de Usuarios</h3>
            <p class="stat-number">{totalUsers}</p>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">✅</div>
          <div class="stat-content">
            <h3>Usuarios Activos</h3>
            <p class="stat-number">{activeUsers}</p>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">🆕</div>
          <div class="stat-content">
            <h3>Nuevos este Mes</h3>
            <p class="stat-number">{newUsersThisMonth}</p>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">📧</div>
          <div class="stat-content">
            <h3>Con Newsletter</h3>
            <p class="stat-number">{usersWithNewsletter}</p>
          </div>
        </div>
      </div>

      <!-- Filtros y búsqueda -->
      <div class="filters-section">
        <div class="search-box">
          <input type="text" id="userSearch" placeholder="Buscar por nombre, email o teléfono..." />
          <button class="search-btn">🔍</button>
        </div>
        <div class="filter-buttons">
          <button class="filter-btn active" data-filter="all">Todos ({totalUsers})</button>
          <button class="filter-btn" data-filter="active">Activos ({activeUsers})</button>
          <button class="filter-btn" data-filter="newsletter">Newsletter ({usersWithNewsletter})</button>
          <button class="filter-btn" data-filter="phone">Con Teléfono ({usersWithPhone})</button>
        </div>
      </div>

      <!-- Lista de usuarios -->
      <div class="users-section">
        <div class="section-header">
          <h2>Lista de Usuarios</h2>
          <div class="view-options">
            <button class="view-btn active" data-view="grid">📋 Vista de Tarjetas</button>
            <button class="view-btn" data-view="table">📊 Vista de Tabla</button>
          </div>
        </div>

        <!-- Vista de tarjetas -->
        <div id="gridView" class="users-grid">
          {users.map((user, index) => (
            <div class="user-card" data-user-id={user.id}>
              <div class="user-avatar">
                <div class="avatar-circle">
                  {user.first_name.charAt(0).toUpperCase()}{user.last_name.charAt(0).toUpperCase()}
                </div>
                <div class={`status-indicator ${user.is_active ? 'active' : 'inactive'}`}></div>
              </div>
              <div class="user-info">
                <h3 class="user-name">{user.first_name} {user.last_name}</h3>
                <p class="user-email">{user.email}</p>
                {user.phone && <p class="user-phone">📞 {user.phone}</p>}
                <p class="user-date">📅 Registrado: {new Date(user.created_at).toLocaleDateString('es-ES')}</p>
              </div>
              <div class="user-badges">
                {user.newsletter === 1 && <span class="badge newsletter">📧 Newsletter</span>}
                {user.phone && <span class="badge phone">📞 Teléfono</span>}
                <span class={`badge status ${user.is_active ? 'active' : 'inactive'}`}>
                  {user.is_active ? '✅ Activo' : '❌ Inactivo'}
                </span>
              </div>
              <div class="user-actions">
                <button class="action-btn view" onclick={`viewUser(${user.id})`}>👁️ Ver</button>
                <button class="action-btn edit" onclick={`editUser(${user.id})`}>✏️ Editar</button>
                <button class="action-btn delete" onclick={`deleteUser(${user.id})`}>🗑️ Eliminar</button>
              </div>
            </div>
          ))}
        </div>

        <!-- Vista de tabla -->
        <div id="tableView" class="users-table" style="display: none;">
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Email</th>
                <th>Teléfono</th>
                <th>Newsletter</th>
                <th>Estado</th>
                <th>Registro</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              {users.map((user) => (
                <tr>
                  <td>{user.id}</td>
                  <td>{user.first_name} {user.last_name}</td>
                  <td>{user.email}</td>
                  <td>{user.phone || '-'}</td>
                  <td>{user.newsletter === 1 ? '✅' : '❌'}</td>
                  <td>
                    <span class={`status-badge ${user.is_active ? 'active' : 'inactive'}`}>
                      {user.is_active ? 'Activo' : 'Inactivo'}
                    </span>
                  </td>
                  <td>{new Date(user.created_at).toLocaleDateString('es-ES')}</td>
                  <td>
                    <button class="action-btn view" onclick={`viewUser(${user.id})`}>👁️</button>
                    <button class="action-btn edit" onclick={`editUser(${user.id})`}>✏️</button>
                    <button class="action-btn delete" onclick={`deleteUser(${user.id})`}>🗑️</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </main>
  </div>

  <style>
    .admin-page {
      min-height: 100vh;
      background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 100%);
      color: #ffffff;
    }

    .admin-main {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    .page-header {
      text-align: center;
      margin-bottom: 40px;
    }

    .page-title {
      font-size: 2.5rem;
      font-weight: 900;
      color: #22c55e;
      margin-bottom: 10px;
    }

    .page-subtitle {
      font-size: 1.2rem;
      color: #a3a3a3;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }

    .stat-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 15px;
      padding: 25px;
      display: flex;
      align-items: center;
      gap: 20px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }

    .stat-card:hover {
      transform: translateY(-5px);
      border-color: #22c55e;
      box-shadow: 0 10px 30px rgba(34, 197, 94, 0.2);
    }

    .stat-icon {
      font-size: 2.5rem;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, #22c55e, #16a34a);
      border-radius: 50%;
    }

    .stat-content h3 {
      font-size: 1rem;
      color: #a3a3a3;
      margin-bottom: 5px;
      font-weight: 600;
    }

    .stat-number {
      font-size: 2rem;
      font-weight: 900;
      color: #ffffff;
      margin: 0;
    }

    .filters-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 15px;
      padding: 25px;
      margin-bottom: 30px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .search-box {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }

    .search-box input {
      flex: 1;
      padding: 12px 20px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.05);
      color: #ffffff;
      font-size: 1rem;
    }

    .search-box input:focus {
      outline: none;
      border-color: #22c55e;
      box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);
    }

    .search-btn {
      padding: 12px 20px;
      background: linear-gradient(135deg, #22c55e, #16a34a);
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      font-size: 1rem;
      transition: all 0.3s ease;
    }

    .search-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(34, 197, 94, 0.4);
    }

    .filter-buttons {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .filter-btn {
      padding: 8px 16px;
      background: transparent;
      color: #a3a3a3;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 20px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }

    .filter-btn:hover,
    .filter-btn.active {
      background: #22c55e;
      color: white;
      border-color: #22c55e;
    }

    .users-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 15px;
      padding: 25px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 25px;
    }

    .section-header h2 {
      font-size: 1.8rem;
      color: #ffffff;
      margin: 0;
    }

    .view-options {
      display: flex;
      gap: 10px;
    }

    .view-btn {
      padding: 8px 16px;
      background: transparent;
      color: #a3a3a3;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }

    .view-btn:hover,
    .view-btn.active {
      background: #22c55e;
      color: white;
      border-color: #22c55e;
    }

    .users-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 20px;
    }

    .user-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 15px;
      padding: 20px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
      position: relative;
    }

    .user-card:hover {
      transform: translateY(-5px);
      border-color: #22c55e;
      box-shadow: 0 10px 30px rgba(34, 197, 94, 0.2);
    }

    .user-avatar {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 15px;
    }

    .avatar-circle {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: linear-gradient(135deg, #22c55e, #16a34a);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 900;
      font-size: 1.2rem;
      color: white;
    }

    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      position: absolute;
      top: 15px;
      right: 15px;
    }

    .status-indicator.active {
      background: #22c55e;
      box-shadow: 0 0 10px rgba(34, 197, 94, 0.5);
    }

    .status-indicator.inactive {
      background: #ef4444;
      box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
    }

    .user-info h3 {
      font-size: 1.3rem;
      color: #ffffff;
      margin: 0 0 5px 0;
      font-weight: 700;
    }

    .user-info p {
      color: #a3a3a3;
      margin: 3px 0;
      font-size: 0.9rem;
    }

    .user-badges {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
      margin: 15px 0;
    }

    .badge {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .badge.newsletter {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .badge.phone {
      background: rgba(59, 130, 246, 0.2);
      color: #3b82f6;
      border: 1px solid rgba(59, 130, 246, 0.3);
    }

    .badge.status.active {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .badge.status.inactive {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .user-actions {
      display: flex;
      gap: 8px;
      margin-top: 15px;
    }

    .action-btn {
      padding: 6px 12px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.8rem;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .action-btn.view {
      background: rgba(59, 130, 246, 0.2);
      color: #3b82f6;
      border: 1px solid rgba(59, 130, 246, 0.3);
    }

    .action-btn.edit {
      background: rgba(245, 158, 11, 0.2);
      color: #f59e0b;
      border: 1px solid rgba(245, 158, 11, 0.3);
    }

    .action-btn.delete {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .users-table {
      overflow-x: auto;
    }

    .users-table table {
      width: 100%;
      border-collapse: collapse;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 10px;
      overflow: hidden;
    }

    .users-table th,
    .users-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .users-table th {
      background: rgba(34, 197, 94, 0.1);
      color: #22c55e;
      font-weight: 700;
    }

    .users-table td {
      color: #ffffff;
    }

    .status-badge {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .status-badge.active {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .status-badge.inactive {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    @media (max-width: 768px) {
      .users-grid {
        grid-template-columns: 1fr;
      }
      
      .stats-grid {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      }
      
      .filter-buttons {
        justify-content: center;
      }
      
      .section-header {
        flex-direction: column;
        gap: 15px;
        align-items: stretch;
      }
    }
  </style>

  <script>
    // Funcionalidad de búsqueda y filtros
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('userSearch') as HTMLInputElement;
      const filterButtons = document.querySelectorAll('.filter-btn');
      const viewButtons = document.querySelectorAll('.view-btn');
      const gridView = document.getElementById('gridView') as HTMLElement;
      const tableView = document.getElementById('tableView') as HTMLElement;
      const userCards = document.querySelectorAll('.user-card');

      // Búsqueda
      searchInput.addEventListener('input', function(this: HTMLInputElement) {
        const searchTerm = this.value.toLowerCase();
        userCards.forEach(card => {
          const nameElement = card.querySelector('.user-name');
          const emailElement = card.querySelector('.user-email');
          const phoneElement = card.querySelector('.user-phone');
          
          const name = nameElement?.textContent?.toLowerCase() || '';
          const email = emailElement?.textContent?.toLowerCase() || '';
          const phone = phoneElement?.textContent?.toLowerCase() || '';
          
          if (name.includes(searchTerm) || email.includes(searchTerm) || phone.includes(searchTerm)) {
            (card as HTMLElement).style.display = 'block';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });
      });

      // Filtros
      filterButtons.forEach(button => {
        button.addEventListener('click', function(this: HTMLElement) {
          filterButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          const filter = this.dataset.filter;
          userCards.forEach(card => {
            let show = true;
            
            switch(filter) {
              case 'active':
                const statusIndicator = card.querySelector('.status-indicator');
                show = statusIndicator?.classList.contains('active') || false;
                break;
              case 'newsletter':
                show = card.querySelector('.badge.newsletter') !== null;
                break;
              case 'phone':
                show = card.querySelector('.badge.phone') !== null;
                break;
            }
            
            (card as HTMLElement).style.display = show ? 'block' : 'none';
          });
        });
      });

      // Cambio de vista
      viewButtons.forEach(button => {
        button.addEventListener('click', function(this: HTMLElement) {
          viewButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          if (this.dataset.view === 'grid') {
            gridView.style.display = 'grid';
            tableView.style.display = 'none';
          } else {
            gridView.style.display = 'none';
            tableView.style.display = 'block';
          }
        });
      });
    });

    // Funciones de acciones de usuario
    function viewUser(userId: number) {
      console.log('Ver usuario:', userId);
      // Implementar modal de vista de usuario
    }

    function editUser(userId: number) {
      console.log('Editar usuario:', userId);
      // Implementar modal de edición de usuario
    }

    function deleteUser(userId: number) {
      if (confirm('¿Estás seguro de que quieres eliminar este usuario?')) {
        console.log('Eliminar usuario:', userId);
        // Implementar eliminación de usuario
      }
    }
  </script>
</AdminLayout>

---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import { courseQueries, moduleQueries, adminSessionQueries } from '../../../../lib/database.js';

// Verificar autenticaci√≥n del lado del servidor
const adminSessionToken = Astro.cookies.get('admin_session')?.value;

if (!adminSessionToken) {
  return Astro.redirect('/admin/login');
}

// Verificar que la sesi√≥n de admin es v√°lida
const adminSession = adminSessionQueries.findByToken(adminSessionToken);
if (!adminSession) {
  return Astro.redirect('/admin/login');
}

const { id } = Astro.params;
const courseId = parseInt(id || '0');

// Obtener datos del curso
const course = await courseQueries.findById(courseId);
if (!course) {
  return Astro.redirect('/admin/courses');
}

// Obtener m√≥dulos del curso (ahora incluyen videos)
const modules = await moduleQueries.getByCourse(courseId);

// Tipos para TypeScript
type Course = typeof course;
type Module = typeof modules[0];
---

<AdminLayout title={`Gestionar Curso - ${(course as any).title}`}>
  <div class="course-management">
    <!-- Header del curso -->
    <div class="course-header">
      <h1 class="course-title">{(course as any).title}</h1>
      <div class="course-meta">
        <span class="meta-item">üìÅ {(course as any).category}</span>
        <span class="meta-item">üë§ {(course as any).instructor || 'Instructor'}</span>
        <span class="meta-item">‚è±Ô∏è {(course as any).duration}h</span>
        <span class="meta-item">üë• {(course as any).students} estudiantes</span>
      </div>
    </div>

    <!-- Tabs de navegaci√≥n -->
    <div class="tabs">
      <button class="tab active" onclick="showTab('modules')">üìÅ M√≥dulos</button>
      <button class="tab" onclick="showTab('upload')">üì§ Subir Videos</button>
    </div>

    <!-- Contenido de M√≥dulos -->
    <div id="modulesTab" class="tab-content active">
      <div class="section-header">
        <h2>M√≥dulos del Curso</h2>
        <button class="btn-primary" onclick="showModuleModal()">+ Nuevo M√≥dulo</button>
      </div>
      
      <div class="modules-list">
        {modules.map((module: any, index: number) => (
          <div class="module-item">
            <div class="module-number">{index + 1}</div>
            <div class="module-content">
              <h3 class="module-title">{module.title}</h3>
              <p class="module-description">{module.description}</p>
              <div class="module-meta">
                <span class="meta-tag">‚è±Ô∏è {module.duration}</span>
                <span class={`meta-tag ${module.isFree === 1 ? 'free' : 'premium'}`}>
                  {module.isFree === 1 ? 'Gratis' : 'Premium'}
                </span>
                <span class="meta-tag video-info">
                  üé• {module.videoUrl ? 'Video disponible' : 'Sin video'}
                </span>
              </div>
            </div>
            <div class="module-actions">
              <button class="btn-edit" data-module-id={module.id}>‚úèÔ∏è Editar</button>
              <button class="btn-delete" data-module-id={module.id}>üóëÔ∏è Eliminar</button>
            </div>
          </div>
        ))}
      </div>
    </div>


    <!-- Contenido de Subir Videos -->
    <div id="uploadTab" class="tab-content">
      <div class="upload-container">
        <h2>Subir Videos al Curso</h2>
        <p>Arrastra y suelta tus videos MP4 aqu√≠ o haz clic para seleccionar archivos</p>
        
        <div class="upload-info">
          <div class="info-item">
            <span class="info-icon">üìÅ</span>
            <span>Formatos soportados: MP4, AVI, MOV</span>
          </div>
          <div class="info-item">
            <span class="info-icon">üíæ</span>
            <span>Tama√±o: SIN L√çMITE ‚úÖ (sube videos de cualquier tama√±o)</span>
          </div>
          <div class="info-item">
            <span class="info-icon">üîí</span>
            <span>Los videos se subir√°n como BLOQUEADOS por defecto</span>
          </div>
        </div>
        
        <div class="upload-area" id="uploadArea">
          <div class="upload-icon">üì§</div>
          <div class="upload-text">Arrastra videos aqu√≠</div>
          <div class="upload-subtext">o haz clic para seleccionar archivos MP4</div>
          <input type="file" id="videoInput" multiple accept="video/mp4,video/avi,video/mov" style="display: none;">
          <button class="upload-btn" onclick="document.getElementById('videoInput').click()">
            Seleccionar Videos
          </button>
        </div>
        
        <div class="upload-progress" id="uploadProgress" style="display: none;">
          <div class="progress-container">
            <div class="progress-title">Subiendo videos...</div>
            <div class="progress-bar">
              <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">0%</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para M√≥dulos -->
  <div id="moduleModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="moduleModalTitle">Nuevo M√≥dulo</h3>
        <button class="close-btn" onclick="closeModuleModal()">&times;</button>
      </div>
      <form id="moduleForm">
        <input type="hidden" id="moduleId" name="id">
        <div class="form-group">
          <label for="moduleTitle">T√≠tulo del M√≥dulo</label>
          <input type="text" id="moduleTitle" name="title" required>
        </div>
        <div class="form-group">
          <label for="moduleDescription">Descripci√≥n *</label>
          <textarea id="moduleDescription" name="description" rows="2" required placeholder="Describe el contenido de este m√≥dulo..."></textarea>
        </div>
        <div class="form-group">
          <label for="moduleDuration">Duraci√≥n (ej: 15:30)</label>
          <input type="text" id="moduleDuration" name="duration" placeholder="15:30">
        </div>
        <div class="form-group">
          <label for="moduleVideoFile">Video del M√≥dulo</label>
          <input type="file" id="moduleVideoFile" name="videoFile" accept="video/*">
          <small class="form-help">Selecciona un archivo de video desde tu computadora (MP4, WebM, OGG, AVI, MOV - SIN L√çMITE DE TAMA√ëO ‚úÖ)</small>
          <div id="uploadProgress" class="upload-progress" style="display: none;">
            <div class="progress-bar">
              <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">Subiendo video...</div>
          </div>
        </div>
        <div class="form-group">
          <label for="moduleVideoUrl">URL del Video (opcional)</label>
          <input type="text" id="moduleVideoUrl" name="videoUrl" placeholder="/videos/mi-video.mp4 o https://www.youtube.com/embed/... (opcional)">
        </div>
        <div class="form-group checkbox-group">
          <label class="checkbox-label">
            <input type="checkbox" id="moduleIsFree" name="isFree" value="1">
            <span class="checkbox-text">M√≥dulo Gratuito</span>
          </label>
        </div>
        <div class="form-actions">
          <button type="button" class="btn-secondary" onclick="closeModuleModal()">Cancelar</button>
          <button type="submit" class="btn-primary">Guardar M√≥dulo</button>
        </div>
      </form>
    </div>
  </div>

</AdminLayout>

<script>
  // @ts-nocheck
  let currentTab = 'modules';
  let editingModuleId = null;
  
  // Obtener courseId de la URL de manera m√°s robusta
  const pathParts = window.location.pathname.split('/');
  const courseId = parseInt(pathParts[pathParts.indexOf('courses') + 1]);
  console.log('Course ID extra√≠do:', courseId);

  // ===== GESTI√ìN DE TABS =====
  function showTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    
    document.getElementById(tabName + 'Tab').classList.add('active');
    event.target.classList.add('active');
    currentTab = tabName;
  }

  // ===== GESTI√ìN DE M√ìDULOS =====
  function showModuleModal(moduleId = null) {
    console.log('=== MOSTRANDO MODAL DE M√ìDULO ===');
    console.log('ModuleId recibido:', moduleId);
    console.log('Tipo de moduleId:', typeof moduleId);
    console.log('Es null o undefined?', moduleId === null || moduleId === undefined);
    
    editingModuleId = moduleId;
    const modal = document.getElementById('moduleModal');
    const titleElement = document.getElementById('moduleModalTitle');
    
    // Limpiar informaci√≥n de video existente
    const existingVideoInfo = document.querySelector('.existing-video-info');
    if (existingVideoInfo) {
      existingVideoInfo.remove();
    }
    
    if (moduleId && moduleId !== null && moduleId !== undefined) {
      console.log('‚úÖ CONFIGURANDO MODAL PARA EDITAR M√ìDULO:', moduleId);
      titleElement.textContent = 'Editar M√≥dulo';
      console.log('T√≠tulo cambiado a: Editar M√≥dulo');
      loadModuleData(moduleId);
    } else {
      console.log('‚úÖ CONFIGURANDO MODAL PARA NUEVO M√ìDULO');
      titleElement.textContent = 'Nuevo M√≥dulo';
      console.log('T√≠tulo cambiado a: Nuevo M√≥dulo');
      document.getElementById('moduleForm').reset();
    }
    
    modal.style.display = 'flex';
    console.log('Modal mostrado con t√≠tulo:', titleElement.textContent);
    console.log('=== FIN MOSTRAR MODAL ===');
  }

  function closeModuleModal() {
    document.getElementById('moduleModal').style.display = 'none';
    editingModuleId = null;
  }

  async function loadModuleData(moduleId) {
    try {
      console.log('=== CARGANDO DATOS DEL M√ìDULO ===');
      console.log('Module ID:', moduleId);
      console.log('Course ID:', courseId);
      console.log('URL completa:', `/api/admin/courses/${courseId}/modules/${moduleId}`);
      
      const response = await fetch(`/api/admin/courses/${courseId}/modules/${moduleId}`, {
        credentials: 'include'
      });
      
      console.log('Respuesta del servidor:', response.status);
      console.log('Headers:', response.headers);
      
      if (response.ok) {
        const module = await response.json();
        console.log('Datos del m√≥dulo recibidos:', module);
        
        // Llenar los campos del formulario
        const moduleIdField = document.getElementById('moduleId');
        const titleField = document.getElementById('moduleTitle');
        const descriptionField = document.getElementById('moduleDescription');
        const durationField = document.getElementById('moduleDuration');
        const videoFileField = document.getElementById('moduleVideoFile');
        const videoUrlField = document.getElementById('moduleVideoUrl');
        const isFreeField = document.getElementById('moduleIsFree');
        
        console.log('Elementos del formulario encontrados:');
        console.log('- moduleIdField:', !!moduleIdField);
        console.log('- titleField:', !!titleField);
        console.log('- descriptionField:', !!descriptionField);
        console.log('- durationField:', !!durationField);
        console.log('- videoFileField:', !!videoFileField);
        console.log('- videoUrlField:', !!videoUrlField);
        console.log('- isFreeField:', !!isFreeField);
        
        if (moduleIdField) {
          moduleIdField.value = module.id;
          console.log('moduleIdField.value =', module.id);
        }
        if (titleField) {
          titleField.value = module.title || '';
          console.log('titleField.value =', module.title);
        }
        if (descriptionField) {
          descriptionField.value = module.description || '';
          console.log('descriptionField.value =', module.description);
        }
        if (durationField) {
          durationField.value = module.duration || '';
          console.log('durationField.value =', module.duration);
        }
        if (videoFileField) {
          // Limpiar el campo de archivo al editar
          videoFileField.value = '';
          console.log('videoFileField.value = "" (campo limpiado para edici√≥n)');
        }
        if (videoUrlField) {
          videoUrlField.value = module.videoUrl || '';
          console.log('videoUrlField.value =', module.videoUrl);
        }
        
        // Mostrar informaci√≥n del video existente
        if (module.videoUrl && module.videoUrl !== 'sin_video') {
          const videoInfo = document.createElement('div');
          videoInfo.className = 'existing-video-info';
          videoInfo.innerHTML = `
            <div style="background: rgba(34, 197, 94, 0.1); padding: 10px; border-radius: 8px; margin-top: 10px; border: 1px solid rgba(34, 197, 94, 0.3);">
              <div style="color: #22c55e; font-weight: 600; margin-bottom: 5px;">üìπ Video actual:</div>
              <div style="color: #e0e0e0; font-size: 0.9rem;">${module.videoUrl}</div>
              <div style="color: #888; font-size: 0.8rem; margin-top: 5px;">Selecciona un nuevo archivo para reemplazarlo, o deja vac√≠o para mantener el actual.</div>
            </div>
          `;
          
          // Insertar despu√©s del campo de archivo
          videoFileField.parentNode.insertBefore(videoInfo, videoFileField.nextSibling);
        }
        if (isFreeField) {
          isFreeField.checked = module.isFree === 1;
          console.log('isFreeField.checked =', module.isFree === 1);
        }
        
        console.log('=== CAMPOS LLENADOS CORRECTAMENTE ===');
      } else {
        const error = await response.json();
        console.error('Error del servidor:', error);
        alert('Error al cargar el m√≥dulo: ' + (error.error || 'Error desconocido'));
      }
    } catch (error) {
      console.error('Error al cargar m√≥dulo:', error);
      alert('Error al cargar el m√≥dulo: ' + error.message);
    }
  }

  // ===== EVENT LISTENERS PARA BOTONES DE EDITAR Y ELIMINAR =====
  document.addEventListener('click', function(e) {
    // Editar m√≥dulo
    if (e.target.classList.contains('btn-edit') || e.target.closest('.btn-edit')) {
      const button = e.target.classList.contains('btn-edit') ? e.target : e.target.closest('.btn-edit');
      const moduleId = parseInt(button.dataset.moduleId);
      console.log('Editando m√≥dulo con ID:', moduleId);
      console.log('Tipo de ID:', typeof moduleId);
      showModuleModal(moduleId);
    }
    
    // Eliminar m√≥dulo
    if (e.target.classList.contains('btn-delete') || e.target.closest('.btn-delete')) {
      const button = e.target.classList.contains('btn-delete') ? e.target : e.target.closest('.btn-delete');
      const moduleId = parseInt(button.dataset.moduleId);
      if (confirm('¬øEst√°s seguro de que quieres eliminar este m√≥dulo?')) {
        deleteModule(moduleId);
      }
    }
  });

  async function deleteModule(moduleId) {
    try {
      const response = await fetch(`/api/admin/courses/${courseId}/modules/${moduleId}`, {
        method: 'DELETE',
        credentials: 'include'
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error al eliminar el m√≥dulo');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error al eliminar el m√≥dulo');
    }
  }


  // ===== FORMULARIOS =====
  document.getElementById('moduleForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    
    // Obtener el archivo de video directamente del FormData
    const videoFile = formData.get('videoFile');
    
    // Convertir FormData a objeto, pero manejar el archivo por separado
    const data = Object.fromEntries(formData.entries());
    data.moduleVideoFile = videoFile; // Asignar el archivo correctamente
    
    console.log('üîç VALOR DEL CHECKBOX ANTES DE PROCESAR:');
    console.log('- data.isFree (raw):', data.isFree);
    console.log('- Tipo:', typeof data.isFree);
    
    // El checkbox solo aparece en FormData si est√° marcado
    // Si est√° marcado, el valor es "1" (string), si no est√° marcado, es undefined
    data.isFree = data.isFree ? 1 : 0;
    
    console.log('üîç VALOR DEL CHECKBOX DESPU√âS DE PROCESAR:');
    console.log('- data.isFree (procesado):', data.isFree);
    console.log('- Tipo:', typeof data.isFree);

    // Validar campos requeridos antes de enviar
    if (!data.title || data.title.trim() === '') {
      alert('Por favor, ingresa un t√≠tulo para el m√≥dulo');
      return;
    }
    
    if (!data.description || data.description.trim() === '') {
      alert('Por favor, ingresa una descripci√≥n para el m√≥dulo');
      return;
    }
    
    if (!data.duration || data.duration.trim() === '') {
      alert('Por favor, ingresa la duraci√≥n del m√≥dulo');
      return;
    }

    console.log('=== AN√ÅLISIS DE VIDEO ===');
    console.log('data.moduleVideoFile:', data.moduleVideoFile);
    console.log('data.moduleVideoUrl:', data.moduleVideoUrl);
    console.log('editingModuleId:', editingModuleId);
    console.log('================================');

    // Manejar subida de video si hay archivo
    console.log('üîç VERIFICANDO ARCHIVO:');
    console.log('- data.moduleVideoFile:', data.moduleVideoFile);
    console.log('- data.moduleVideoFile.name:', data.moduleVideoFile?.name);
    console.log('- data.moduleVideoFile.size:', data.moduleVideoFile?.size);
    console.log('- data.moduleVideoFile.type:', data.moduleVideoFile?.type);
    
    if (data.moduleVideoFile && data.moduleVideoFile.name && data.moduleVideoFile.size > 0) {
      try {
        console.log('üì§ SUBIENDO VIDEO:');
        console.log('- Nombre:', data.moduleVideoFile.name);
        console.log('- Tama√±o:', data.moduleVideoFile.size, 'bytes');
        console.log('- Tipo:', data.moduleVideoFile.type);
        
        // Crear FormData para subir el archivo
        const uploadFormData = new FormData();
        uploadFormData.append('video', data.moduleVideoFile);
        
        console.log('üì§ Enviando al servidor...');
        
        // Subir el archivo
        const uploadResponse = await fetch('/api/admin/upload-video', {
          method: 'POST',
          credentials: 'include',
          body: uploadFormData
        });
        
        console.log('üì§ Respuesta del servidor:', uploadResponse.status, uploadResponse.statusText);
        
        if (uploadResponse.ok) {
          const uploadResult = await uploadResponse.json();
          data.videoUrl = uploadResult.videoUrl;
          console.log('‚úÖ VIDEO SUBIDO EXITOSAMENTE:');
          console.log('- URL:', uploadResult.videoUrl);
          console.log('- Archivo guardado como:', uploadResult.fileName);
          console.log('- Tama√±o guardado:', uploadResult.fileSize, 'bytes');
          console.log('- Mensaje:', uploadResult.message);
        } else {
          const error = await uploadResponse.json();
          console.error('‚ùå ERROR AL SUBIR VIDEO:', error);
          alert('Error al subir el video: ' + error.error);
          return;
        }
      } catch (error) {
        console.error('‚ùå ERROR AL SUBIR VIDEO:', error);
        alert('Error al subir el video: ' + error.message);
        return;
      }
    } else if (data.moduleVideoUrl && data.moduleVideoUrl.trim() !== '' && data.moduleVideoUrl.trim() !== 'sin_video') {
      // Si hay URL pero no archivo, usar la URL (pero no si es 'sin_video')
      data.videoUrl = data.moduleVideoUrl;
      console.log('üåê Usando URL proporcionada:', data.videoUrl);
    } else {
      console.log('üîç NO HAY ARCHIVO NI URL NUEVA - Manteniendo video existente...');
      
      // Si estamos editando, mantener el video existente
      if (editingModuleId) {
        console.log('üîí MANTENIENDO VIDEO EXISTENTE - Editando m√≥dulo sin cambios de video');
        
        // Obtener el video existente del m√≥dulo desde la base de datos
        try {
          const response = await fetch(`/api/admin/courses/${courseId}/modules/${editingModuleId}`, {
            credentials: 'include'
          });
          
          if (response.ok) {
            const existingModule = await response.json();
            data.videoUrl = existingModule.videoUrl || 'sin_video';
            console.log('‚úÖ Video existente obtenido de la BD:', data.videoUrl);
          } else {
            data.videoUrl = 'sin_video';
            console.log('‚ùå No se pudo obtener video existente, usando placeholder');
          }
        } catch (error) {
          console.error('Error al obtener video existente:', error);
          data.videoUrl = 'sin_video';
        }
      } else {
        // Si es un m√≥dulo nuevo y no hay video, usar placeholder
        data.videoUrl = 'sin_video';
        console.log('Nuevo m√≥dulo sin video - usando placeholder');
      }
    }

    // Remover el campo de archivo ya que no se puede enviar en JSON
    delete data.moduleVideoFile;

    // Asegurar que siempre hay un videoUrl v√°lido
    if (!data.videoUrl || data.videoUrl.trim() === '') {
      data.videoUrl = 'sin_video';
      console.log('VideoUrl vac√≠o - usando placeholder');
    }
    
    // Log final para debug
    console.log('üé¨ VIDEO FINAL QUE SE GUARDAR√Å:', data.videoUrl);
    
    // Preparar datos para env√≠o (sin el objeto File)
    const dataToSend = {
      id: data.id,
      title: data.title,
      description: data.description,
      duration: data.duration,
      videoUrl: data.videoUrl,
      isFree: data.isFree,
      orderIndex: data.orderIndex || 0
    };
    
    console.log('üìã DATOS COMPLETOS A ENVIAR:', JSON.stringify(dataToSend, null, 2));
    console.log('Datos a enviar:', dataToSend);

    // Mostrar indicador de carga
    const submitButton = e.target.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.textContent = '‚è≥ Guardando...';
    submitButton.disabled = true;

    try {
      const url = editingModuleId 
        ? `/api/admin/courses/${courseId}/modules/${editingModuleId}`
        : `/api/admin/courses/${courseId}/modules`;
      
      const method = editingModuleId ? 'PUT' : 'POST';

      console.log('üöÄ Enviando al servidor:', method, url);
      
      const response = await fetch(url, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(dataToSend)
      });

      console.log('üì• Respuesta recibida:', response.status, response.statusText);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ M√≥dulo guardado exitosamente:', result);
        alert('‚úÖ M√≥dulo guardado correctamente!');
        closeModuleModal();
        location.reload();
      } else {
        const error = await response.json();
        console.error('‚ùå Error del servidor:', error);
        alert('Error al guardar el m√≥dulo: ' + (error.error || 'Error desconocido'));
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    } catch (error) {
      console.error('‚ùå Error fatal:', error);
      alert('Error al guardar el m√≥dulo: ' + error.message);
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  });


  // ===== SUBIR VIDEOS =====
  function setupUpload() {
    const uploadArea = document.getElementById('uploadArea');
    const videoInput = document.getElementById('videoInput');

    uploadArea.addEventListener('click', () => videoInput.click());
    videoInput.addEventListener('change', (e) => handleVideoUpload(e.target.files));
  }

  async function handleVideoUpload(files) {
    if (files.length === 0) return;
    
    const progressContainer = document.getElementById('uploadProgress');
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    
    if (progressContainer) {
      progressContainer.style.display = 'block';
    }
    
    try {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // Mostrar progreso
        const progress = Math.round(((i + 1) / files.length) * 100);
        if (progressFill) progressFill.style.width = progress + '%';
        if (progressText) progressText.textContent = `Subiendo video ${i + 1} de ${files.length}...`;
        
        // Crear FormData
        const formData = new FormData();
        formData.append('video', file);
        formData.append('courseId', courseId);
        formData.append('title', file.name.replace(/\.[^/.]+$/, "")); // Nombre sin extensi√≥n
        formData.append('description', `Video subido: ${file.name}`);
        formData.append('duration', '00:00'); // Duraci√≥n por defecto
        formData.append('isFree', 'false'); // Por defecto no es gratuito
        
        // Subir video
        const response = await fetch('/api/admin/upload-video', {
          method: 'POST',
          credentials: 'include',
          body: formData
        });
        
        if (!response.ok) {
          throw new Error(`Error al subir ${file.name}`);
        }
        
        const result = await response.json();
        console.log('Video subido:', result);
      }
      
      // Completado
      if (progressFill) progressFill.style.width = '100%';
      if (progressText) progressText.textContent = '¬°Todos los videos subidos correctamente!';
      
      setTimeout(() => {
        if (progressContainer) progressContainer.style.display = 'none';
        if (progressFill) progressFill.style.width = '0%';
        alert('Videos subidos correctamente');
        location.reload();
      }, 2000);
      
    } catch (error) {
      console.error('Error al subir videos:', error);
      alert('Error al subir videos: ' + error.message);
      if (progressContainer) progressContainer.style.display = 'none';
    }
  }

  // ===== INICIALIZACI√ìN =====
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Admin de cursos cargado');
    console.log('Course ID:', courseId);
    setupUpload();
  });

  // Hacer funciones globales
  window.showTab = showTab;
  window.showModuleModal = showModuleModal;
  window.closeModuleModal = closeModuleModal;
  window.deleteModule = deleteModule;
</script>

<style>
  .course-management {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
  }

  .course-header {
    background: linear-gradient(135deg, #22c55e, #16a34a);
    border-radius: 15px;
    padding: 30px;
    margin-bottom: 30px;
    color: white;
  }

  .course-title {
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 15px;
  }

  .course-meta {
    display: flex;
    gap: 25px;
    flex-wrap: wrap;
  }

  .meta-item {
    background: rgba(255, 255, 255, 0.2);
    padding: 8px 15px;
    border-radius: 20px;
    font-weight: 500;
  }

  .tabs {
    display: flex;
    gap: 15px;
    margin-bottom: 30px;
    background: rgba(255, 255, 255, 0.05);
    padding: 10px;
    border-radius: 12px;
  }

  .tab {
    background: transparent;
    border: none;
    padding: 15px 30px;
    border-radius: 8px;
    color: #b0b0b0;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .tab:hover {
    background: rgba(34, 197, 94, 0.1);
    color: #22c55e;
  }

  .tab.active {
    background: linear-gradient(135deg, #22c55e, #16a34a);
    color: white;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
  }

  .section-header h2 {
    font-size: 1.8rem;
    color: #ffffff;
    font-weight: 700;
  }

  .btn-primary {
    background: linear-gradient(135deg, #22c55e, #16a34a);
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(34, 197, 94, 0.4);
  }

  .upload-progress {
    margin-top: 30px;
  }

  .progress-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    padding: 20px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .progress-title {
    color: #ffffff;
    font-weight: 600;
    margin-bottom: 10px;
  }

  .progress-bar {
    background: #333;
    border-radius: 4px;
    height: 8px;
    overflow: hidden;
    margin-bottom: 10px;
  }

  .progress-fill {
    background: linear-gradient(135deg, #22c55e, #16a34a);
    height: 100%;
    width: 0%;
    transition: width 0.3s ease;
    border-radius: 4px;
  }

  .progress-text {
    color: #b0b0b0;
    font-size: 0.9rem;
    text-align: center;
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
  }

  .btn-edit {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 6px;
    cursor: pointer;
    margin-right: 5px;
  }

  .btn-delete {
    background: #ef4444;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 6px;
    cursor: pointer;
  }

  .modules-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .module-item {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    padding: 20px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .module-number {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #22c55e, #16a34a);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    flex-shrink: 0;
  }

  .module-content {
    flex: 1;
  }

  .module-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 8px;
  }

  .module-description {
    color: #b0b0b0;
    font-size: 0.9rem;
    margin-bottom: 12px;
  }

  .module-meta {
    display: flex;
    gap: 10px;
  }

  .meta-tag {
    background: rgba(255, 255, 255, 0.1);
    color: #b0b0b0;
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 0.8rem;
  }

  .meta-tag.free {
    background: rgba(34, 197, 94, 0.2);
    color: #22c55e;
  }

  .meta-tag.premium {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .meta-tag.video-info {
    background: rgba(59, 130, 246, 0.2);
    color: #3b82f6;
  }

  .module-actions {
    display: flex;
    gap: 10px;
  }

  .videos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }

  .video-item {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .video-thumbnail {
    height: 180px;
    background: #000;
    position: relative;
  }

  .video-thumbnail iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  .video-locked {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #b0b0b0;
  }

  .lock-icon {
    font-size: 2rem;
    margin-bottom: 10px;
  }

  .video-content {
    padding: 15px;
  }

  .video-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 8px;
  }

  .video-description {
    color: #b0b0b0;
    font-size: 0.85rem;
    margin-bottom: 12px;
  }

  .video-meta {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
  }

  .video-duration {
    color: #b0b0b0;
    font-size: 0.8rem;
  }

  .video-status {
    font-size: 0.8rem;
    font-weight: 600;
  }

  .video-status.free {
    color: #22c55e;
  }

  .video-status.locked {
    color: #ef4444;
  }

  .video-actions {
    display: flex;
    gap: 8px;
  }

  .upload-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 40px;
    text-align: center;
  }

  .upload-info {
    background: rgba(34, 197, 94, 0.1);
    border-radius: 10px;
    padding: 20px;
    margin: 20px 0;
    border: 1px solid rgba(34, 197, 94, 0.3);
  }

  .info-item {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
    color: #b0b0b0;
    font-size: 0.9rem;
  }

  .info-item:last-child {
    margin-bottom: 0;
  }

  .info-icon {
    font-size: 1.2rem;
  }

  .upload-area {
    border: 2px dashed #22c55e;
    border-radius: 12px;
    padding: 60px 20px;
    margin: 20px 0;
    cursor: pointer;
  }

  .upload-icon {
    font-size: 4rem;
    margin-bottom: 20px;
  }

  .upload-text {
    font-size: 1.3rem;
    font-weight: 600;
    color: #e0e0e0;
    margin-bottom: 8px;
  }

  .upload-subtext {
    color: #888;
    margin-bottom: 30px;
  }

  .upload-btn {
    background: linear-gradient(135deg, #22c55e, #16a34a);
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    background: #1a1a1a;
    border-radius: 12px;
    padding: 20px;
    width: 85%;
    max-width: 450px;
    max-height: 80vh;
    overflow-y: auto;
    border: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    flex-direction: column;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    flex-shrink: 0;
  }

  .modal-header h3 {
    color: #ffffff;
    font-size: 1.3rem;
    font-weight: 600;
  }

  .close-btn {
    background: none;
    border: none;
    color: #b0b0b0;
    font-size: 2rem;
    cursor: pointer;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .form-group label {
    display: block;
    color: #ffffff;
    font-weight: 600;
    margin-bottom: 8px;
  }

  /* Estilos para checkbox */
  .checkbox-group {
    margin: 20px 0;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 12px;
    cursor: pointer;
    padding: 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    transition: background 0.3s ease;
  }

  .checkbox-label:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .checkbox-label input[type="checkbox"] {
    width: 20px;
    height: 20px;
    cursor: pointer;
    margin: 0;
    flex-shrink: 0;
  }

  .checkbox-text {
    color: #ffffff;
    font-weight: 500;
    font-size: 1rem;
    user-select: none;
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 6px;
    background: rgba(255, 255, 255, 0.05);
    color: #ffffff;
    font-size: 14px;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: #22c55e;
  }

  .form-group input[type="file"] {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    padding: 12px;
    color: #ffffff;
    font-size: 14px;
    width: 100%;
    cursor: pointer;
  }

  .form-group input[type="file"]:focus {
    outline: none;
    border-color: #22c55e;
    box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);
  }

  .form-help {
    display: block;
    margin-top: 5px;
    font-size: 12px;
    color: #888;
    font-style: italic;
  }

  .upload-progress {
    margin-top: 10px;
    padding: 10px;
    background: rgba(34, 197, 94, 0.1);
    border-radius: 8px;
    border: 1px solid rgba(34, 197, 94, 0.3);
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 8px;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #22c55e, #16a34a);
    width: 0%;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 12px;
    color: #22c55e;
    text-align: center;
    font-weight: 600;
  }

  .form-actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    margin-top: 15px;
    flex-shrink: 0;
  }

  @media (max-width: 768px) {
    .course-management {
      padding: 15px;
    }
    
    .modal-content {
      width: 95%;
      max-width: 400px;
      padding: 15px;
      max-height: 85vh;
    }
    
    .modal-header h3 {
      font-size: 1.2rem;
    }
    
    .form-group {
      margin-bottom: 12px;
    }
    
    .form-group input,
    .form-group textarea,
    .form-group select {
      padding: 8px;
      font-size: 13px;
    }
  }

    .course-title {
      font-size: 2rem;
    }

    .tabs {
      flex-direction: column;
    }

    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 15px;
    }

    .module-item {
      flex-direction: column;
      align-items: flex-start;
    }

    .videos-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
